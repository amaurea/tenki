#!/usr/bin/env python
import argparse
parser = argparse.ArgumentParser()
parser.add_argument("files", nargs="+", help="""imaps templates omaps. Often there will be just a single
of each, but you can also do something like imap1.fits imap2.fits templ1.fits templ2.fits omap1.fits omap2.fits""")
parser.add_argument("-i", "--first", type=int, default=None, help="The first field to use. Set to value greater than 0 to skip the first fields.")
parser.add_argument("-n", "--ncomp", type=int, default=None, help="The number of fields to use. By default all are read for normal maps, and 3 are read for healpix maps. If 3 fields are read, they are assumed to be the T,Q,U stokes parameters.")
parser.add_argument("-H", "--hdu",   type=int, default=None, help="The HDU to read the map from. 0 by default.")
parser.add_argument("-r", "--rot",   type=str, default=None, help="Coordinate transformation to perform while interpolation. By default no rotation is performed. Takes the form isys,osys, where either can be cel, gal or ecl for celestial (equatorial), galactic or ecliptic coordinates respectively. For example -r gal,cel would transform from an input map in galactic coordinates to an output map in equatorial coordinates.")
parser.add_argument("-O", "--order", type=int, default=3, help="Interpolation order. Defaults to bicubic spline interpolation (3)."),
parser.add_argument("-l", "--lmax",  type=int, default=None)
parser.add_argument("-v",      action="count", default=0, help="Increase verbosity.")
parser.add_argument("-q",      action="count", default=0, help="Decrease verbosity.")
parser.add_argument("--nopol", action="store_true", help="Do not perform any polarization rotation.")
parser.add_argument("-T", "--transpose", action="store_true", help="Changes the ifiles ordering to imap1 templ1 omap2 imap2 templ2 omap2 ...")
parser.add_argument("-c", "--cont",      action="store_true", help="Skip files where the output file already exists")
args = parser.parse_args()
import numpy as np, sys, time, os
from enlib import enmap, utils, mpi

printer = utils.Printer(args.v - args.q)

def remove_bad(arr, extra_vals=[], fill=0):
	arr  = np.asanyarray(arr).copy()
	mask = ~np.isfinite(arr)
	for val in extra_vals:
		mask |= np.isclose(arr, val)
	arr[mask] = 0
	return arr

nfile = len(args.files)//3
if len(args.files) > nfile*3:
	print "There must be an equal number of input maps, templates and output maps"
	sys.exit(1)

if not args.transpose:
	imaps     = args.files[0*nfile:1*nfile]
	templates = args.files[1*nfile:2*nfile]
	omaps     = args.files[2*nfile:3*nfile]
else:
	imaps     = args.files[0::3]
	templates = args.files[1::3]
	omaps     = args.files[2::3]

prev_templatefile = None

comm = mpi.COMM_WORLD
for ind in range(comm.rank, nfile, comm.size):
	imapfile, templatefile, omapfile = imaps[ind], templates[ind], omaps[ind]
	if args.cont and os.path.isfile(omapfile): continue
	try:
		# We separate out this part first, so we know the exception
		# came from the read and not somewhere else.
		try:
			# Assume it's not a healpix map first
			with printer.time("read %s" % imapfile, 0):
				imap  = enmap.read_map(imapfile, hdu=args.hdu)
				heal  = False
		except ValueError:
			import healpy
			# Try reading as healpix map
			first = args.first or 0
			ncomp = args.ncomp or 3
			fields= tuple(range(first,first+ncomp))
			with printer.time("read healpix %s" % imapfile, 0):
				imap   = np.atleast_2d(healpy.read_map(ifmapfile, field=fields, hdu=args.hdu or 1))
			with printer.time("remove bad values", 1):
				imap = remove_bad(imap, [healpy.UNSEEN])
			heal   = True

		# Ok, now we know which type we have.
		if not heal:
			# It's convenient to have a stokes axis, even if we don't
			# end up using it.
			orig_ndim  = imap.ndim
			if imap.ndim == 2: imap = imap[None]
			if args.first: imap = imap[...,args.first:,:,:]
			if args.ncomp: imap = imap[...,:args.ncomp,:,:]
			pol   = imap.shape[-3] == 3 and not args.nopol
			if prev_templatefile != templatefile:
				with printer.time("read %s" % templatefile, 1):
					template = enmap.read_map(templatefile)
			prev_templatefile = templatefile
			if args.rot:
				import coordinates
				s1,s2 = args.rot.split(",")
				with printer.time("compute target positions", 1):
					pmap  = template.posmap()
				with printer.time("compute input  positions", 1):
					opos  = coordinates.transform(s2, s1, pmap[::-1], pol=pol)
					pmap[...] = opos[1::-1]
				with printer.time("interpolate", 1):
					omap  = enmap.samewcs(imap.at(pmap, order=args.order, mask_nan=False), template)
				if args.rot and pol:
					with printer.time("rotate polarization", 1):
						omap[1:3] = enmap.rotate_pol(omap[1:3], -opos[2])
			else:
				t1 = time.time()
				try:
					omap = enmap.extract(imap, template.shape, template.wcs)
					name = "extract"
				except AssertionError:
					omap = imap.project(template.shape, template.wcs, order=args.order, mask_nan=False)
					name = "interpolate"
				t2 = time.time()
				printer.write(name, 1, prepend="%6.2f " % (t2-t1))
			# Remove any pre-axes we added if necessary
			if orig_ndim == 2: omap = omap[0]
			with printer.time("write %s" % omapfile, 1):
				enmap.write_map(omapfile, omap)
		else:
			from enlib import curvedsky
			# We will project using a spherical-harmonics transform because
			# interpolating on the healpix grid is hard. This is slow and
			# memory-intensive, but has the advantage that downgrading does
			# not lose more information than necessary.
			with printer.time("prepare SHT", 1):
				pol   = ncomp == 3 and not args.nopol
				nside = healpy.npix2nside(imap.shape[1])
				lmax  = args.lmax or 3*nside
			with printer.time("map2alm", 1):
				# Perform the actual transform
				alm   = healpy.map2alm(map, lmax=lmax)
				del imap
			if prev_templatefile != templatefile:
				with printer.time("read %s" % templatefile, 1):
					template = enmap.read_map(templatefile)
			prev_templatefile = templatefile
			with printer.time("compute target positions", 1):
				# Compute position of our output pixels in the input map
				pmap = template.posmap()
			if args.rot:
				s1,s2 = args.rot.split(",")
				with printer.time("compute input  positions", 1):
					opos = coordinates.transform(s2, s1, pmap[::-1], pol=pol)
					pmap[...] = opos[1::-1]
					if len(opos) == 3: psi = -opos[2].copy()
					del opos
			with printer.time("interpolate with alm2map", 1):
				# Project down on the specified positions
				omap = curvedsky.alm2map_pos(alm, pmap)
			# Apply polarization rotation if necessary
			if args.rot and pol:
				with printer.time("rotate polarization", 1):
					omap[1:3] = enmap.rotate_pol(omap[1:3], psi)
			with printer.time("write %s" % omapfile, 1):
				enmap.write_map(omapfile, omap)
	except (IOError, TypeError) as e:
		print "Error projecting %s on %s to %s : %s. Skipping" % (imapfile, templatefile, omapfile, e.args[0])
		continue
